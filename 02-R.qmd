# La science des donn√©es avec R {#sec-R}

---

 **Objectifs sp√©cifiques**:

√Ä la fin de ce chapitre, vous

- saurez contextualiser la science des donn√©es par rapport aux statistiques,
- serez en mesure de vous lancer dans un environnement de programmation R,
- serez en mesure d'effectuer des op√©rations de base en R,
- saurez diff√©rencier les grands types d'objets de R et
- saurez installer et charger des modules compl√©mentaire.

---

Un projet en science des donn√©es comprend trois grandes √©tapes. D'abord, vous devez **collecter des donn√©es** et les compiler ad√©quatement. Cela peut consister √† t√©l√©charger des donn√©es existantes, ex√©cuter un dispositif exp√©rimental ou effectuer une recensement (√©tude observationnelle). Compiler les donn√©es dans un format qui puisse √™tre import√© est une t√¢che souvent longue et fastidieuse. Puis, vous **investiguez les donn√©es** collect√©es, c'est-√†-dire que vous les visualisez, vous appliquez des mod√®les et testez des hypoth√®ses. Enfin, la **communication des r√©sultats** consiste √† pr√©senter les connaissances qui √©mergent de votre analyse sous forme visuelle et narrative, *avec un langage adapt√© √† la personne qui vous √©coute*, qu'elle soit experte ou novice, r√©viseure de revue savante ou gestionnaire [Grolemund et Wickham (2023)](https://r4ds.hadley.nz/intro) propose la structure d'analyse de la @fig-R-data-flow-chart, avec de l√©g√®res modifications de ma part.

```{r}
#| label: fig-R-data-flow-chart
#| out-width: 100%
#| fig-align: center
#| fig-cap: Flux des donn√©es en sciences des donn√©es.
#| echo: false
knitr::include_graphics("images/02_science-des-donnees-flow_.png")
```

Le grand cadre sp√©cifie **Programmer**. Oui, vous aurez besoin d'√©crire du code. Mais comme je l'ai indiqu√© dans le premier chapitre, ceci n'est pas un cours de programmation et je pr√©f√©rerai les approches intuitives.

## Statistiques ou science des donn√©es?

Selon [Whitlock et Schluter (2015)](http://whitlockschluter.zoology.ubc.ca/), la statistique est l'*√©tude des m√©thodes pour d√©crire et mesurer des aspects de la nature √† partir d'√©chantillon*. Pour [Grolemund et Wickham (2023)](https://r4ds.hadley.nz/intro), la science des donn√©es est *une discipline excitante permettant de transformer des donn√©es brutes en compr√©hension, perspectives et connaissances*. Oui, *excitante*! La diff√©rence entre les deux champs d'expertise est subtile, et certaines personnes n'y voient qu'une diff√©rence de ton.

<blockquote class="twitter-tweet" data-lang="fr"><p lang="en" dir="ltr">Data Science is statistics on a Mac.</p>&mdash; Big Data Borat (@BigDataBorat) <a href="https://twitter.com/BigDataBorat/status/372350993255518208?ref_src=twsrc%5Etfw">27 ao√ªt 2013</a></blockquote>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

Confin√©es √† ses applications traditionnelles, les statistiques sont davantage vou√©es √† la d√©finition de dispositifs exp√©rimentaux et √† l'ex√©cution de tests d'hypoth√®ses, alors que la science des donn√©es est moins lin√©aire, en particulier dans sa phase d'analyse, o√π de nouvelles questions (donc de nouvelles hypoth√®ses) peuvent √™tre pos√©es au fur et √† mesure de l'analyse. Cela arrive g√©n√©ralement davantage lorsque l'on fait face √† de nombreuses observations sur lesquelles de nombreux param√®tres sont mesur√©s.

La quantit√© de donn√©es et de mesures auxquelles nous avons aujourd'hui acc√®s gr√¢ce aux technologies de mesure et de stockage relativement peu dispendieux rend la science des donn√©es une discipline particuli√®rement attrayante, pour ne pas dire [sexy](https://hbr.org/2012/10/data-scientist-the-sexiest-job-of-the-21st-century).

## D√©buter en R

[R](https://www.r-project.org) est un langage de programmation d√©riv√© du langage S, qui fut initialement lanc√© en 1976.

```{r}
#| label: fig-R-logo
#| out-width: 25%
#| fig-align: center
#| fig-cap: Logo officiel du language R.
#| echo: false
knitr::include_graphics("images/02_R_logo.svg.png")
```

R figure parmi [les langages de programmation les plus utilis√©s au monde](https://www.tiobe.com/tiobe-index/). Bien qu'il soit bas√© sur les langages statiques C et Fortran, R est un langage dynamique, c'est-√†-dire que le code peut √™tre ex√©cut√© ligne par ligne ou bloc par bloc: un avantage majeur pour des activit√©s qui n√©cessitent des interactions fr√©quentes. Bien que R soit surtout utilis√© pour le calcul statistique, il s'impose de plus en plus comme outil privil√©gi√© en sciences des donn√©es en raison des r√©cents d√©veloppements de modules d'analyse, de mod√©lisation et de visualisation, dont plusieurs seront utilis√©s dans ce manuel.

Un langage de programmation s'apprend un peu comme une langue. Au d√©but, un code R peut sembler incompr√©hensible. Et face √† son clavier, on ne sait pas trop comment exprimer ce que l'on d√©sire. Au fur et √† mesure de l'apprentissage, les symboles, les fonctions et le style deviennent de plus en plus familiers et on apprend tranquillement √† traduire en code ce que l'on d√©sire effectuer. Comme une langue s'apprend en la parlant dans la vie de tous les jours, un language de programmation s'apprend avantageusement en solutionnant vos propres probl√®mes (@fig-R-first-and-then).

```{r}
#| label: fig-R-first-and-then
#| out-width: 100%
#| fig-align: center
#| fig-cap: R avant et maintenant, Illustration de [Allison Horst](https://github.com/allisonhorst/stats-illustrations)
#| echo: false
knitr::include_graphics("images/02_r_first_then.png")
```

## Pr√©parer son flux de travail

Il existe de nombreuses mani√®res d'utiliser R. Parmi celles-ci, j'en couvrirai 3:

- Installation classique (installation sugg√©r√©e)
- Installation avec Anaconda
- Utilisation infonuagique

### Installation classique

**Installation sugg√©r√©e**. Sur Windows ou Mac, dirigez-vous [ici](https://cloud.r-project.org/), t√©l√©chargez et installez. Sur Linux, ouvrez votre gestionnaire d'application, chercher `r-base` (Ubuntu, Debian), `R-base` (openSuse) ou `R-core` (Fedora) et installez-le (assurez-vous que les librairies suivantes sont aussi install√©es: `gcc`, `gcc-fortran`, `gcc-c++` et `make`), vous aurez peut-√™tre besoin d'installer des librairies suppl√©mentaires pour faire fonctionner certains modules.

> **Note**. Les modules pr√©sent√©s dans ce cours devraient √™tre disponibles sur Linux, Windows et Mac. Ce n'est pas le cas pour tous les modules R. La plupart fonctionnent n√©anmoins sur Linux, dont les syst√®mes d'op√©ration (je recommande [Ubuntu](https://www.ubuntu.com/download/desktop) ou l'une de ses d√©riv√©es comme [elementary OS](https://elementary.io/)) sont de bonnes options pour le calcul scientifique.

√Ä cette √©tape, R devrait fonctionner dans un interpr√©teur de commande . Si vous lancez R dans un terminal (chercher `cmd` dans le menu si vous √™tes sur Windows), vous obtiendrez quelque chose comme ceci.

```{r}
#| label: fig-R-terminal
#| out-width: 100%
#| fig-align: center
#| fig-cap: R dans le terminal.
#| echo: false
knitr::include_graphics("images/02_terminal-prompt.png")
```

Le symbole `>` indique que R attend que vos instructions. Vous voil√† dans un √©tat m√©ditatif devant l'ind√©chiffrable vide du terminal üòµ. Ne vous en faites pas: nous commencerons bient√¥t √† jaser avec R.

Avant cela, installons-nous au salon. Afin de travailler dans un environnement de travail plus confortable, je recommande l'installation de l'interface [RStudio](https://posit.co/download/rstudio-desktop/), gratuite et open source: t√©l√©chargez l'installateur et suivez les instructions. RStudio ressemble √† ceci.

```{r}
#| label: fig-R-rstudio
#| out-width: 100%
#| fig-align: center
#| fig-cap: Fen√™tre de RStudio.
#| echo: false
knitr::include_graphics("images/02_rstudio.png")
```

En haut √† droite se trouve un menu *Project (None)*. Il s'agit d'un menu de vos projets. Je recommande d'utiliser ces projets avec RStudio, qui vous permettront de mieux g√©rer vos sessions de travail, en particulier en lien avec les chemins vers vos donn√©es, graphiques, etc., que vous pouvez g√©rer relativement √† l'emplacement de votre dossier de projet plut√¥t qu'√† l'emplacement des fichiers sur votre machine: nous verrons plus en d√©tails au [chapitre @sec-git].

- En haut √† gauche, vous avez vos feuilles de calcul, qui appara√Ætront en tant qu'onglets. Une feuille de calcul *R script* est une s√©rie de commandes que vous lancez en s√©quence. Il peut aussi s'agir d'un document *Quarto* si vous choisissez de travailler ainsi. Ce format vous permettra de d'√©crire du texte en format [*Markdown*](https://quarto.org/docs/authoring/markdown-basics.html) entre des blocs de code. Il est question du format *Quarto* au [chapitre @sec-git]).
- En bas √† gauche appara√Æt la Console, o√π vous voyez les commandes envoy√©es √† R ainsi que ses sorties.
- En haut √† droite, les diff√©rents onglets indiquent o√π vous en √™tes dans vos calculs. En particulier, la liste sous *Environment* indique les objets qui ont √©t√© g√©n√©r√©s ou charg√©s jusqu'alors.
- En bas √† droite, on retrouve des onglets de nature vari√©s. *Files* contient les sous-dossiers et fichiers du dossier de projets. *Plots* est l'endroit o√π appara√Ætront vos graphiques. *Packages* contient la liste des modules d√©j√† install√©s, ainsi qu'un outil de gestion des modules pour leur installation, leur d√©sinstallation et leur mise √† jour. *Help* affiche les fiches d'aide des fonctions (pour obtenir de l'aide sur une fonction dans RStudio, surlignez la fonction dans votre feuille de calcul, puis appuyez sur `F1`). Enfin, l'onglet *Viewer* affichera les sorties HTML, en particulier les graphiques interactifs que vous g√©n√©rerez par exemple avec le module `plotly`, ou alors le rendu de votre fichier *Quarto*. Si votre environnement de travail √©tait un avion, R serait le moteur et RStudio serait le cockpit!

```{r}
#| label: fig-R-fifi
#| out-width: 100%
#| fig-align: center
#| fig-cap: Sc√®ne de Fifi Brindacier ([Astrid Lindgren, 1945](https://fr.wikipedia.org/wiki/Fifi_Brindacier)).
#| echo: false
knitr::include_graphics("https://media.giphy.com/media/GmaV9oet9MAmI/giphy.gif")
```

### Installation avec Anaconda

Si vous cherchez une trousse compl√®te d'analyse de donn√©es, comprenant R et Python, vous pourrez pr√©f√©rer [Anaconda](https://www.anaconda.com/download). Une fois install√©e, vous pourrez isoler un environnement de travail sur R, ou m√™me isoler des environnements de travail particuliers pour vos projets. Une mani√®re conviviale de cr√©er des environnements de travail est de passer par l'interface *Anaconda navigator*, que vous lancerez soit dans le menu Windows, soit en ligne de commande `anaconda-navigator` sous Mac et Linux, puis d'installer `r-essentials`, `rstudio` et `jupyterlab` dans l'onglet *Environment*. Vous pourrez aussi installer `RStudio` et `Jupyter lab` via l'onglet *Home* de `Anaconda navigator`. Dans l'environnement de base, installez le package `nb_conda_kernels` pour vous assurer que tous les noyaux (R, Python, etc.) install√©s dans les environnements de travail soient automatiquement accessibles dans Jupyter. Si vous d√©sirez utiliser dans Jupyter la version de R install√©e avec l'installation classique, r√©f√©rez-vous au guide pr√©sent√© [en extra au bas de la page](#extra-jupyter).

```{r}
#| label: fig-R-anaconda
#| out-width: 100%
#| fig-align: center
#| fig-cap: Anaconda navigator.
#| echo: false
knitr::include_graphics("images/02_anaconda-navigator.png")
```

[*Jupyter lab*](https://jupyter.org/) est une interface notebook semblable √† *Quarto*  - les format *Jupyter* (`*.ipynb`) et *Quarto* (`*.qmd`) sont par ailleurs convertibles gr√¢ce au module [jupytext](https://jupytext.readthedocs.io/en/latest/formats-markdown.html). L'utilisation de R en Anaconda n'est pas tout √† fait au point, et pourrait poser probl√®me pour l'installation de certains modules. Si vous optez pour cette option, pr√©parez-vous √† avoir √† bidouiller un peu. Plusieurs pr√©f√®rent Jupyter √† RStudio (ce n'est pas mon cas).

### Utilisation infonuagique

Pas besoin d'avoir une machine super puissante pour travailler en R. Il existe [une multitude de services infonuagiques](https://github.com/markusschanta/awesome-jupyter#hosted-notebook-solutions) (dans le *cloud*) vous permettant de lancer vos calculs sur des serveurs plut√¥t que sur votre Chromebook ou votre vieux laptop d√©glingu√©. Certains services sont gratuits, et d'autres souvent plus √©labor√©s sont payants. Vous pouvez utiliser gratuitement [Azure Notebooks](https://notebooks.azure.com) ou un [tour de passe-passe](https://stackoverflow.com/a/54595286) pour faire fonctionner Google colab en R. Une option gratuite de [CoCalc](https://cocalc.com/) vient avec un agressant bandeau rouge vif qui disparait avec l'option payante.

√Ä mon avis, le service [**Nextjournal**](https://nextjournal.com) est celui d'entre tous qui poss√®de en ce moment les meilleures qualit√©s dans sa version gratuite. Vous pourrez y travailler en mode collaboratif, comme dans Google docs. En outre, vous pouvez lancer ces notes de cours en les important dans Nextjournal. Vous devrez toutefois d√©poser les donn√©es dans l'interface, puis √† chaque session installer les modules sp√©cialis√©s. Le service gratuit offre peu de puissance de calcul, mais pour effectuer les applications de base, √ßa devrait √™tre suffisant. La vid√©o ci-dessous monter comment importer les notes de cours dans Nextjournal.

![](videos/nextjournal.webm)

## Premiers pas avec R

R ne fonctionne pas avec des menus, en faisant danser une souris sous une musique de clics. Vous devrez donc entrer des commandes avec votre clavier, que vous apprendrez par c≈ìur au fur et √† mesure, ou que vous retrouverez en lan√ßant des recherches sur internet. Par exp√©rience personnelle, lorsque je travaille avec R, j'ai toujours un navigateur ouvert pr√™t √† recevoir une question.

Les √©tapes qui suivent sont des premiers pas. Elles ne feront pas de vous des *ceintures noires* de la programmation. La plupart des utilisateurs de R ont appris en se pratiquant sur leurs donn√©es, en se butant sur des obstacles, en apprenant comment les surmonter ou les contourner...

Pour l'instant, ouvrez seulement un interpr√©teur de commande, et lancez R. Voyons si R est aussi libre qu'on le pr√©tend.

> "La libert√©, c‚Äôest la libert√© de dire que deux et deux font quatre. Si cela est accord√©, tout le reste suit." - George Orwell, 1984

```{r}
#| label: intro-sum
2 + 2
```

Et voil√†.

<img width="200" src="images/02_braveheart224.png">

Les op√©rations math√©matiques sont effectu√©es telles que l'on devrait s'attendre.

```{r}
#| label: intro-operations
67.1 - 43.3

2 * 4

1 / 2
```

L'exposant peut √™tre not√© `^`, comme c'est le cas dans *Excel*, ou `**` comme c'est le cas en Python.

```{r intro-power}
2^4
```

```{r intro-power-alt}
2**4
```

```{r intro-division}
1 / 2 # utilisez des espaces de part et d'autre des op√©rateurs (sauf pour l'exposant) pour √©claircir le code
```

R ne lit pas ce qui suit le caract√®re `#`. Cela vous laisse l'opportunit√© de commenter un code comprenant une s√©quence de plusieurs lignes. Remarquez √©galement que la derni√®re op√©ration comporte des espaces entre les nombres et l'op√©rateur `/`. Dans ce cas (ce n'est pas toujours le cas), les espaces ne signifient rien: ils aident seulement √† √©claircir le code. Il existe des guides pour l'√©criture de code en R. Je recommande **fortement** de suivre **m√©ticuleusement** le guide de style de [tidyverse](https://style.tidyverse.org).

Assigner des objets √† des variables est fondamental en programmation. En R, on assigne traditionnellement avec la fl√®che `<-`, mais vous verrez parfois le `=`, qui est davantage utilis√© comme standard dans d'autres langages de programmation. Par exemple.

```{r intro-assignation}
a <- 3
```

**Truc**. Essayez d'inverser la fl√®che, e.g. `3 -> a`.

Techniquement, `a` pointe vers le nombre entier 3. Cons√©quemment, on peut effectuer des op√©rations sur `a`.

```{r intro-assignation-mult}
a * 6
```

```{r intro-sensible-a-la-case}
#| eval: false
A + 2
```

Le message d'erreur nous dit que `A` n'est pas d√©fini. Sa version minuscule, `a`, l'est pourtant. La raison est que R consid√®re la *case* dans la d√©finition des objets. Utiliser la mauvaise case m√®ne donc √† des erreurs.

**Note**. Les messages d'erreur ne sont pas toujours clairs, mais vous apprendrez √† les comprendre. Dans tous les cas, ils sont fait pour vous aider. Lisez-les attentivement!

En g√©n√©ral, le nom d'une variable doit toujours commencer par une lettre, et ne doit pas contenir de caract√®res r√©serv√©s (espaces, `+`, `*`). Dans la d√©finition des variables, plusieurs utilisent des symboles `.` pour d√©limiter les mots, mais la barre de soulignement `_` est √† pr√©f√©rer. En effet, dans d'autres langages de programmation comme Python, le `.` a une autre signification: son utilisation est √† √©viter autant que possible. De m√™me, √©vitez l'utilisation de majuscules pour nommer vos objets (voir le guide de style de [tidyverse](https://style.tidyverse.org/syntax.html#object-names) pour nommer les objets).

**Note**. √Ä ce stade, vous serez probablement plus √† l'aise de copier-coller ces commandes dans votre terminal.

```{r intro-bloc-calcul}
rendement_arbre <- 50 # pomme/arbre
nombre_arbre <- 300 # arbre
nombre_pomme <- rendement_arbre * nombre_arbre
nombre_pomme
```

Comme chez la plupart des langages de programmation, R respecte les conventions des [priorit√©s des op√©rations math√©atiques](https://fr.wikipedia.org/wiki/Ordre_des_op%C3%A9rations).

```{r intro-priorite-des-operations}
10 - 9^0.5 * 2
```

### Types de donn√©es

Jusqu'√† maintenant, nous n'avons utilis√© que des **nombres entiers** (*integer* ou `int`) et des **nombres r√©els** (*numeric* ou `float64`). R inclut d'autres types. La **cha√Æne de caract√®re** (*string* ou *character*) contient un ou plusieurs symboles. Elle est d√©finie entre des doubles guillemets `" "` ou des apostrophes `' '`. Il n'existe pas de standard sur l'utilisation de l'un ou de l'autre, mais en r√®gle g√©n√©rale, on utilise les apostrophes pour les expressions courtes, contenant un simple mot ou une s√©quence de lettres, et les guillemets pour les phrases. Une raison pour cela: les guillemets sont utiles pour ins√©rer des apostrophes dans une cha√Æne de caract√®re.

```{r intro-paste}
a <- "L'ours"
b <- "polaire"
paste(a, b)
```

On *colle* `a` et `b` avec la fonction `paste`. Notez que l'objet `a` a √©t√© d√©fini pr√©c√©demment. Il est possible en R de r√©assigner une variable, mais cela peut porter √† confusion, jusqu'√† g√©n√©rer des erreurs de calcul si une variable n'est pas assign√©e √† l'objet auquel on voulait r√©f√©rer.

Combien de caract√®res contient la cha√Æne `"L'ours polaire"`? R sait compter. Demandons-lui.

```{r introchar-count}
c <- paste(a, b)
nchar(c)
```

Quatorze, c'est bien cela (comptez "L'ours polaire", en incluant l'espace). Comme `paste`, `nchar` est une fonction incluse par d√©faut dans l'environnement de travail de R: plus pr√©cis√©ment, ces fonctions sont incluses dans le module `base`, inclut par d√©faut lorsque R est lanc√©. La fonction est appel√©e en √©crivant `nchar()`. Mais une fonction de quoi? Des *arguments*, qui se trouvent entre les parenth√®ses. Dans ce cas, il y a un seul argument: `c`.

En calcul scientifique, il est courant de lancer des requ√™tes d√©terminant si un r√©sultat est vrai ou faux.

```{r intro-bool}
a <- 17
a < 10
a > 10
a == 10
a != 10
a == 17
!(a == 17)
```

Je viens d'introduire un nouveau type de donn√©e: les donn√©es bool√©ennes (*boolean*, ou `logical`), qui ne peuvent prendre que deux √©tats - `TRUE` ou `FALSE`. En m√™me temps, j'ai utilis√© la fonction `print` parce que dans mon carnet, seule la derni√®re op√©ration permet d'afficher le r√©sultat. Si l'on veut forcer une sortie, on utilise `print`. Puis, on a vu plus haut que le symbole `=` est r√©serv√© pour assigner des objets: pour les tests d'√©galit√©, on utilise le double √©gal, `==`, ou `!=` pour la non-√©galit√©. Enfin, pour inverser une donn√©e de type bool√©enne, on utilise le point d'exclamation `!`.

### Les collections de donn√©es

Les exercices pr√©c√©dents ont permis de pr√©senter les types de donn√©es offerts par d√©faut sur R qui sont les plus importants pour le calcul scientifique: `int` (*integer*, ou nombre entier), `numeric` (nombre r√©el), `character` (*string*, ou cha√Æne de caract√®re) et `logical` (bool√©en). D'autres s'ajouteront tout au long du cours, comme les cat√©gories (`factor`) et les unit√©s de temps (date-heure).

Lorsque l'on proc√®de √† des op√©rations de calcul en science, nous utilisons rarement des valeurs uniques. Nous pr√©f√©rons les organiser et les traiter en collections. Par d√©faut, R offre quatre types importants de collections: les **vecteurs**, les **matrices**, les **listes** et les **tableaux**.

#### Vecteurs

D'abord, les **vecteurs** sont une s√©rie de variables de m√™me type. Un vecteur est d√©limit√© par la fonction `c( )` (`c` pour **c**oncat√©nation). Les √©l√©ments de la liste sont s√©par√©s par des virgules.

```{r intro-vector}
espece <- c("Petromyzon marinus", "Lepisosteus osseus", "Amia calva", "Hiodon tergisus")
espece
```

Pour acc√©der aux √©l√©ments d'une liste, one appelle la liste suivie de la position de l'objet d√©sir√© entre crochets.

```{r intro-vect-index}
espece[1]
espece[2]
espece[1:3]
espece[c(1, 3)]
```

On peut noter que le premier √©l√©ment de la liste est not√© `1`, et non `0` comme c'est le cas de la plupart de langages. Le raccourcis `1:3` cr√©e une liste de nombres entiers de `1` √† `3` inclusivement, c'est-√†-dire l'√©quivalent de `c(1, 2, 3)`. En effet, on cr√©e une liste d'indices pour soutirer des √©l√©ments d'une liste. On peut utiliser le symbole de soustraction pour retirer un ou plusieurs √©l√©ments d'un vecteur.

```{r intro-vect-index-vect}
espece[-c(1, 3)]
```

Pour ajouter un √©l√©ment √† notre liste, on peut utiliser la fonction `c( )`.

```{r intro-vector-add}
espece <- c(espece, "Cyprinus carpio")
espece
```

Notez que l'on efface l'objet `espece` par une concat√©nation de l'objet `espece`, pr√©c√©demment d√©finie, et d'un autre √©l√©ment.

En lan√ßant `espece[3] <- "Lepomis gibbosus"`, il est possible de changer un √©l√©ment de la liste.

```{r intro-vet-change}
espece[3] <- "Lepomis gibbosus"
espece
```

#### Matrices

Une **matrice** est un vecteur de dimension plus √©lev√©e que 1. En √©cologie, on d√©passe rarement la deuxi√®me dimension, quoi que les matrices en `N` dimensions soient courantes en mod√©lisation math√©matique. Je ne consid√©rerai pour le moment que des matrices `2D`. Comme c'est la cas des vecteurs, les matrices contiennent des valeurs de m√™me type. En R, on peut attribuer aux matrices `2D` des noms de ligne et de colonne.

```{r intro-mat}
mat <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), 
              ncol = 3)
mat
```

```{r intro-mat-def}
colnames(mat) <- c("A", "B", "C")
rownames(mat) <- c("site_1", "site_2", "site_3", "site_4")
mat
```

On peut soutirer les noms de colonne et les noms de ligne. Le r√©sultat est un vecteur.

```{r intro-mat-def-getnames}
colnames(mat)
rownames(mat)
```

#### Listes

Les **listes** sont des collections h√©t√©rog√®nes dans lesquelles on peut placer les objets d√©sir√©s, sans distinction: elles peuvent m√™me inclure d'autres listes. Chacun des √©l√©ments de la liste peut √™tre identifi√© par une cl√©.

```{r intro-list}
ma_liste <- list(
  especes = c(
    "Petromyzon marinus", "Lepisosteus osseus",
    "Amia calva", "Hiodon tergisus"
  ),
  site = "A101",
  stations_meteos = c("746583", "783786", "856363")
)
ma_liste
```

Les √©l√©ments de la liste peuvent √™tre soutir√©s par le nom de la cl√© ou par l'indice, de cette mani√®re.

```{r intro-list-index}
ma_liste$especes
ma_liste[[1]]
```

**Exercice**. Acc√©der au deuxi√®me √©l√©ment du vecteur d'esp√®ces dans la liste ma_liste.

#### Tableaux

Enfin, le type de collection de donn√©es le plus important est le tableau, ou `data.frame`. Techniquement, il s'agit d'une liste compos√©e de vecteurs de m√™me longueur. Chaque colonne peut ainsi prendre un type de donn√©e ind√©pendamment des autres colonnes.

```{r intro-df}
tableau <- data.frame(
  espece = c(
    "Petromyzon marinus", "Lepisosteus osseus",
    "Amia calva", "Hiodon tergisus"
  ),
  poids = c(10, 13, 21, 4),
  longueur = c(35, 44, 50, 8)
)
tableau
```

En programmation classique en R (nous verrons plus loin la m√©thode `tidyverse`), les √©l√©ments d'un tableau se manipulent comme ceux d'une matrice et les colonnes peuvent √™tre appel√©s comme les √©l√©ments d'une liste.

```{r intro-df-col}
tableau[, 2:3]
tableau$poids
```

Vous verrez aussi, quoi que rarement, ce format, qui √† la diff√©rence du format `$` g√©n√®re un tableau.

```{r intro-df-col2}
tableau["poids"]
```

Le tableau est le format de collection √† privil√©gier pour manipuler des donn√©es. R√©cemment, le format de tableau `tibble` a √©t√© cr√©√© par l'√©quipe de RStudio pour offrir un format plus moderne.

### Les fonctions

Lorsque vous √©crivez une commande suivit de parenth√®ses, comme `data.frame(especes = ...)`, vous demandez √† R de passer √† l'action en appelant une fonction. De mani√®re tr√®s g√©n√©rale, une fonction transforme quelque chose en quelque chose d'autre (@fig-intro-fonction).

```{r}
#| label: fig-intro-fonction
#| out-width: 60%
#| fig-align: center
#| fig-cap: "Sch√©ma simplifi√© d'une fonction."
#| echo: false
knitr::include_graphics("images/02_fonctions_io_.png")
```

Par exemple, la fonction `mean()` prend une collection de nombre comme entr√©e, puis en sort vous devinez quoi.

```{r intro-mean}
mean(tableau$poids)
```

Les entr√©es sont appel√©s les **arguments** de la fonction. Leur d√©finition est toujours disponible dans la documentation.

**Exercice**. Familiarisez-vous avec la documentation de R en lan√ßant `?mean`. Truc: si vous avez pris de l'avance et que vous travaillez d√©j√† en RStudio, mettez le terme en surbrillance, puis appuyez sur F1.

Vous verrez dans la documentation que la fonction `mean()` demande trois arguments, `x`, `trim` et `na.rm`. Or nous avons seulement plac√© un vecteur, sans sp√©cifier d'argument!

En effet. En l'absence d'une d√©finition des arguments, R supposera que les arguments dans la parenth√®se, s√©par√©s par une virgule, sont pr√©sent√©s dans le m√™me ordre que celui sp√©cifi√© dans la d√©finition de la fonction (celle qui est pr√©sent√©e dans le fichier d'aide). Dans le cas qui nous int√©resse, `mean(tableau$poids)` est √©quivalent √† `mean(x = tableau$poids)`.

Maintenant, selon la fiche d'aide, l'argument `na.rm` est un valeur logique sp√©cifiant si oui (`TRUE`) ou non (`FALSE`) les valeurs manquantes doivent √™tre consid√©r√©es (une moyenne d'un vecteur comprenant au moins un `NA` sera de `NA`). En ne sp√©cifiant rien, R prend la valeur par d√©faut, telle que sp√©cifi√©e dans la documentation. Il en va de m√™me pour l'argument `trim`, qui permet d'√©laguer des valeurs extr√™mes. Dans la fiche d'aide, `mean(x, trim = 0, na.rm = FALSE, ...)` signifie que par d√©faut, l'argument `x` est vide (il doit donc √™tre sp√©cifi√©), l'argument `trim` est de 0 et l'argument `na.rm` est `FALSE`.

```{r intro-mean-2}
mean(c(6, 1, 7, 4, 9, NA, 1))
mean(c(6, 1, 7, 4, 9, NA, 1), na.rm = TRUE)
```

Vous n'√™tes pas emprisonn√© par les fonctions offertes par R. Vous pouvez installer des modules qui compl√®tent les fonctions de base de R: on le verra un peu plus loin dans ce chapitre. Mais pour l'instant, voyons comment vous pouvez cr√©er vos propres fonctions. Disons que vous voulez cr√©er une fonction qui calcule la sortie de $x^3-2y+a$. Pour obtenir la r√©ponse, on a besoin des arguments `x`, `y` et `a`. La sortie de la fonction est ici triviale: la r√©ponse de l'√©quation. L'op√©ration `function` permet de prendre √ßa en charge.

```{r intro-define-function}
operation_f <- function(x, y, a = 10) {
  return(x^3 - 2 * y + a)
}
```

Notez que `a` a une valeur par d√©faut. La sortie de la fonction est ce qui se trouve entre les parenth√®ses de `return`. Vous pouvez maintenant utiliser la fonction operation_f au besoin.

```{r intro-exec-function}
operation_f(x = 2, y = 3, a = 1)
```

Une telle fonction est peu utile. Mais l'utilisation de fonctions personnalis√©es vous permettra d'√©viter de r√©p√©ter la m√™me op√©ration plusieurs fois dans un flux de travail, en √©vitant de g√©n√©rer trop de code, donc aussi de potentielles erreurs. Personnellement, j'utilise les fonctions surtout pour g√©n√©rer des graphiques personnalis√©s.

**Exercice**. Afin d'acqu√©rir de l'autonomie, vous devrez √™tre en mesure de trouver le nom des commandes dont vous avez besoin pour effectuer la t√¢che que vous d√©sirez effectuer. Cela peut causer des frustrations, mais vous vous sentirez toujours plus √† l'aise avec R jour apr√®s jour. L'exercice ici est de trouver par vous-m√™me la commande qui vous permettra mesurer la longueur d'un vecteur.

### Les boucles

Les boucles permettent d'effectuer une m√™me suite d'op√©rations sur plusieurs objets. Pour faire suite √† notre exemple, nous d√©sirons obtenir le r√©sultat de l'op√©ration *f* pour des param√®tres que nous enregistrons dans ce tableau.

```{r intro-df-loop}
params <- data.frame(
  x = c(2, 4, 1, 5, 6),
  y = c(3, 4, 8, 1, 0),
  a = c(6, 1, 8, 2, 5)
)
params
```

Nous cr√©ons un vecteur vide, puis nous effectuons une it√©ration ligne par ligne en remplissant le vecteur.

```{r intro-loop}
operation_res <- c()
for (i in 1:nrow(params)) {
  operation_res[i] <- operation_f(x = params[i, 1], y = params[i, 2], a = params[i, 3])
}
operation_res
```

En faisant varier `i` sur des valeurs du vecteur donn√© par la s√©quence de nombres entiers de 1 au nombre de ligne du tableau de param√®tres, nous demandons √† R d'effectuer la suite d'op√©ration entre les accolades `{}`. √Ä chaque boucle, `i` prend une valeur de la s√©quence. `i` est utilis√© ici comme indice de la ligne √† soutirer du tableau `params`, qui correspond √† l'indice dans le vecteur operation_res.

Ainsi, chaque r√©sultat est calcul√© dans l'ordre des lignes du tableau de param√®tres et l'on pourra tr√®s bien y coller nos r√©sultats:

```{r intro-store-loop}
params$resultats <- operation_res
params
```

Notez que puisque la colonne `resultat` n'existe pas dans le tableau `params`, R cr√©e automatiquement une nouvelle colonne.

Les boucles `for` vous permettront par exemple de g√©n√©rer en peu de temps 10, 100, 1000 graphiques (autant que vous voulez), chacun issu de simulations obtenues √† partir de conditions initiales diff√©rentes, et de les enregistrer dans un r√©pertoire sur votre ordinateur. Un travail qui pourrait prendre des semaines sur Excel peut √™tre effectu√© en R en quelques secondes.

Un second outil est disponible pour les it√©rations: les boucles **`while`**. Elles effectuent une op√©ration tant qu'un crit√®re n'est pas atteint. Elles sont utiles pour les op√©rations o√π l'on cherche une convergence. Je les couvre rapidement puisqu‚Äôelles sont rarement utilis√©es dans les flux de travail courants. En voici un petit exemple.

```{r intro-while}
x <- 100
while (x > 1.1) {
  x <- sqrt(x)
  print(x)
}
```

Nous avons initi√© x √† une valeur de 100. Puis, tant que (`while`) le test `x > 1.1` est vrai, attribuer √† `x` la nouvelle valeur calcul√©e en extrayant la racine de la valeur pr√©c√©dente de `x`. Enfin, indiquer la valeur avec `print`.

### Conditions: `if`, `else if`, `else`

> Si la condition 1 est remplie, effectuer une suite d'instructions 1. Si la condition 1 n'est pas remplie, et si la condition 2 est remplie, effectuer la suite d'instructions 2. Sinon, effectuer la suite d'instruction 3.

Voil√† comment on exprime une suite de conditions. Prenons l'exemple simple d'une discr√©tisation d'une valeur continue. Si $x<10$, il est class√© comme faible. Si $10 \leq x <20$, il est class√© comme moyen. Si $x \geq 20$, il est class√© comme √©lev√©. Pla√ßons cette classification dans une fonction.

```{r intro-if}
classification <- function(x, lim1 = 10, lim2 = 20) {
  if (x < lim1) {
    categorie <- "faible"
  } else if (x < lim2) {
    categorie <- "moyen"
  } else {
    categorie <- "√©lev√©"
  }
  return(categorie)
}
classification(-10)
classification(15.4)
classification(1000)
```

Une condition est d√©finie avec le `if`, suivi du test √† vrai ou faux entre parenth√®ses. Si le test retourne un *vrai* (`TRUE`), l'instruction entre accolades est ex√©cut√©e. Si elle est fausse, on passe au suivant.

**Exercice**. Explorer les commandes `ifelse` et `cut` et r√©fl√©chissez √† la mani√®re qu'elles pourraient √™tre utilis√©es pour effectuer une discr√©tisation plus efficacement qu'avec les `if` et les `else`.

### Installer et charger un module

La plupart des op√©rations d'ordre g√©n√©ral (comme les racines carr√©es, les tests statistiques, la gestion de matrices et de tableau, les graphiques, etc.) sont accessibles gr√¢ce aux modules de base de R, qui sont install√©s et charg√©s par d√©faut lors du d√©marrage de R. Des √©quipes de travail ont n√©anmoins d√©velopp√© plusieurs modules pour r√©pondre √† leurs besoins sp√©cialis√©s, et les ont laiss√©s disponibles au grand public dans des modules que vous pouvez installer d'un d√©p√¥t CRAN (le AppStore de R), d'un d√©p√¥t Anaconda (le AppStore de Anaconda, si vous utilisez cette plate-forme), d'un d√©p√¥t Github (d√©p√¥ts d√©centralis√©s), etc.

RStudio poss√®de un pratique bouton *Install* qui vous permet d'y inscrire une liste de modules. Le navigateur anaconda offre aussi une interface d'installation. La commande R pour installer un module est `install.packages("ggplot2")`, si par exemple vous d√©sirez installer `ggplot2`, le module graphique par excellence en R. C'est la commande que RStudio lancera tout seul si vous lui demandez d'installer `ggplot2`.

Les modules sont l'√©quivalent des applications sp√©cialis√©es que vous installez sur un t√©l√©phone mobile. Pour les utiliser, il faut les ouvrir.

G√©n√©ralement, j'ouvre toutes les applications n√©cessaires √† mon flux de travail au tout d√©but de ma feuille de calcul (la prochaine cellule retournera un message d'erreur si les packages ne sont pas install√©s).

```{r intro-package}
library("tidyverse") # m√©ta-package qui charge entre autres dplyr et ggplot2
library("vegan")
library("nlme")
```

Les modules sont install√©s sur votre ordinateur √† un endroit que vous pourrez retrouver avec la commande `.libPaths()`

**Exercice**. √Ä partir d'ici jusqu'√† la fin du cours, nous utiliserons RStudio. Ouvrez-le et familiarisez-vous avec l'interface! Quelques petits trucs:

- pour lancer une ligne, placez votre curseur sur la ligne, puis appuyez sur Ctrl+Enter
- pour lancer une partie de code pr√©cise, mettez le en surbrillance, puis Ctrl+Enter
- utilisez toujours le gestionnaire de projets, en haut √† droite!
- installez le module **`tidyverse`**
- lancez `data("iris")` pour obtenir un tableau d'exercice, puis cliquez sur l'objet dans la fen√™tre environnement

## Enfin...

Comme une langue, on n'apprend √† s'exprimer en un langage informatique qu'en se mettant √† l'√©preuve, ce que vous ferez tout au long de ce cours. Pour vous encourager, voici quelques trucs pour apprendre √† coder en R.

- **R n'aime pas l‚Äôambigu√Øt√©**. Une simple virgule mal plac√©e et il ne sait plus quoi faire. Cela peut √™tre frustrant au d√©but, mais cette rigidit√© est n√©cessaire pour effectuer du calcul scientifique.
- **Le copier-coller est votre ami**. En gardant √† l'esprit que vous √™tre responsable de votre code et que vous respectez les droits d'auteur, n'ayez pas peur de copier-coller des lignes de code et de personnaliser par la suite.
- **L'erreur que vous obtenez: d'autres l'ont obtenue avant vous**. Le site de question-r√©ponse [stackoverflow](https://stackoverflow.com/questions/tagged/r) est une ressource inestimable o√π des gens ayant post√© des questions ont re√ßu des r√©ponses d'experts (les meilleures r√©ponses et les meilleures questions apparaissent en premier). Apprenez √† chercher intelligemment des r√©ponses en formulant pr√©cis√©ment vos questions!
- **√âtudiez et pratiquez**. Les messages d'erreur en R sont courants, m√™me chez les personnes exp√©riment√©es. La meilleure mani√®re d'apprendre une langue est de la parler, d'√©tudier ses susceptibilit√©s, de les tester dans une conversation, etc.

## Petit truc!

RStudio peut √™tre impl√©ment√© avec des extensions. L'une d'elle permet d'ajuster votre style de code. Par exemple, vous voulez vous assurer que toutes les allocations sont bien effectu√©es avec des `<-` et non pas des `=`, qu'il y a bien des espaces de part et d'autre de `<-`, que les retours de lignes sont bien plac√©s, etc. Installez le module **`styler`**, et des options appara√Ætront dans le menu `Addins` comme √† la @fig-intro-styler.

```{r}
#| label: fig-intro-styler
#| out-width: 40%
#| fig-align: center
#| fig-cap: "L'extension styler permet de formater votre code dans un style particulier"
#| echo: false
knitr::include_graphics("images/02_styler.png")
```

## Extra: Utiliser R avec Jupyter {#extra-jupyter}

Pour utiliser R dans Jupyter notebook ou Jupyter lab, vous devez installer le module **`IRkernel`** dans la version de R que vous d√©sirez utiliser avec Jupyter, puis de lancer la commande `IRkernel::installspec()`. La prochaine fois que vous ouvrirez Jupyter, le noyau de R devrait appara√Ætre.

Je n'ai aucune exp√©rience sur Mac, mais semble-t-il cela fonctionne comme en Linux. Ouvrez R √† partir d'un terminal (R + Enter), puis lancez `IRkernel::installspec()` apr√®s avoir install√© **`IRkernel`**. Si vous travaillez en Windows, il vous faudra lancer R par son chemin complet dans l'invite de commande de Anaconda (*Anaconda Powershell Prompt*). Par exemple, ouvrir *Anaconda Powershell Prompt*, puis, si votre installation de R se trouve dans `C:\Program Files\R\R-3.6.2`, 

```
(base) PS C:\Users\fifi> cd "C:\Program Files\R\R-3.6.2\bin"
(base) PS C:\Program Files\R\R-3.6.2\bin> .\R.exe

R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R est un logiciel libre livr√© sans AUCUNE GARANTIE.
Vous pouvez le redistribuer sous certaines conditions.
Tapez 'license()' ou 'licence()' pour plus de d√©tails.

R est un projet collaboratif avec de nombreux contributeurs.
Tapez 'contributors()' pour plus d'information et
'citation()' pour la fa√ßon de le citer dans les publications.

Tapez 'demo()' pour des d√©monstrations, 'help()' pour l'aide
en ligne ou 'help.start()' pour obtenir l'aide au format HTML.
Tapez 'q()' pour quitter R.

> install.packages("IRkernel")
Installation du package dans 'C:/Users/fifi/Documents/R/win-library/3.6'
(car 'lib' n'est pas sp√©cifi√©)
--- SVP s√©lectionner un miroir CRAN pour cette session ---
essai de l'URL 'https://cloud.r-project.org/bin/windows/contrib/3.6/IRkernel_1.1.zip'
Content type 'application/zip' length 138696 bytes (135 KB)
downloaded 135 KB

le package 'IRkernel' a √©t√© d√©compress√© et les sommes MD5 ont √©t√© v√©rifi√©es avec succ√©s

Les packages binaires t√©l√©charg√©s sont dans
       C:\Users\fifi\AppData\Local\Temp\Rtmp6xJtB3\downloaded_packages

> IRkernel::installspec()
[InstallKernelSpec] Installed kernelspec ir in C:\Users\fifi\AppData\Roaming\jupyter\kernels\ir
> qui()
```

```{r intro-rmlist, include=FALSE}
rm(list = ls())
```

